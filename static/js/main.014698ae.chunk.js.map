{"version":3,"sources":["components/Header/logo.svg","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","styled","section","AccountBalance","props","buttonText","showBalance","content","amount","onClick","handleShowBalance","Td","td","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerid","Table","table","CoinList","coinData","map","key","Img","img","Head","header","H1","h1","Header","className","src","logo","alt","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.014698ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\n\n\nexport default function AccountBalance(props) {\n   \n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = null;\n    if (props.showBalance) {\n        content = <>Balance: ${props.amount}</>\n    }\n    return ( \n        <Section>\n            {content}\n            <button onClick={props.handleShowBalance}>{buttonText}</button>\n        </Section>\n        );\n    \n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\n\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 25vh;\n`;\n\n\nexport default function Coin(props) {\n\n    const handleClick = (event) => {\n        event.preventDefault();\n        props.handleRefresh(props.tickerid);\n    }\n  \n    return (\n        <tr>\n            <Td>{props.name}</Td>\n            <Td>{props.ticker}</Td>\n            <Td>${props.price}</Td>\n            {props.showBalance ? <Td>{props.balance}</Td> : null}\n            <Td>\n                <form action=\"#\" method=\"POST\">\n                    <button onClick={handleClick}>Refresh</button>\n                </form>\n            </Td>\n        </tr>\n    );\n    \n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.75rem;\n`;\n\nexport default function CoinList(props) {\n\n    return (\n        <Table>\n            <thead>\n                <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                <th>Price</th>\n                {props.showBalance ? <th>Balance</th> : null}\n                <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    props.coinData.map( ({key, name, ticker, price, balance}) => \n                        <Coin key={key}\n                                handleRefresh={props.handleRefresh}\n                                name={name} \n                                ticker={ticker} \n                                showBalance={props.showBalance}\n                                balance={balance}\n                                price={price}\n                                tickerid={key}/> \n                        )\n                }\n            </tbody>\n        </Table>\n    )\n}\n","import React from 'react'\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n`;\n\nconst Head = styled.header`\n    background-color: #282c34;\n    min-height: 20vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;\n`;\n\nconst H1 = styled.h1`\n    font-size: 4rem;\n`;\n\n  \nexport default function Header(props) {\n \n    return (\n        <Head className=\"App-header\">\n            <Img src={logo} alt=\"React logo\" className=\"App-logo\" />\n            <H1 className=\"App-title\">\n                Coin Exchange\n            </H1>\n        </Head>\n    )\n    \n}\n","import React, { useState, useEffect } from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport Header from './components/Header/Header';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n    text-align: center;\n    background-color: rgb(20, 56, 97);\n    color: #cccccc;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins')\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      }\n    })\n    setCoinData(coinPriceData);\n  };\n\n  useEffect(function() {\n    if (coinData.length === 0 ) {\n      // component did mount\n      componentDidMount();\n    }\n  });\n \n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/' + valueChangeId;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function( values ) {\n      let newValues = {...values};\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  const handleShowBalance = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  return (\n    <Div>\n      <Header />\n      <AccountBalance amount={balance} showBalance={showBalance} handleShowBalance={handleShowBalance}/>\n      <CoinList coinData={coinData} showBalance={showBalance} handleRefresh={handleRefresh}/>\n    </Div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}